extend type Mutation {
  "ユーザーを作成する"
  createUser(input: CreateUserInput! @spread): CreateUserPayload!
    @field(resolver: "App\\GraphQL\\Mutations\\User\\CreateUser")

  "ユーザー情報を更新"
  updateUser(input: UpdateUserInput!): UpdateUserPayload!
    @guard
    @field(resolver: "App\\GraphQL\\Mutations\\User\\UpdateUser")

  "ユーザーが退会を行う"
  deleteUser: Boolean @guard @field(resolver: "App\\GraphQL\\Mutations\\User\\DeleteUser")
}

# create user
input CreateUserInput @validator(class: "App\\GraphQL\\Validators\\User\\CreateUserValidator") {
  name: String!
  email: Email!
  password: String! @hash
}

type CreateUserPayload {
  name: String!
  email: Email!
  access_token: String!
  refresh_token: String!
}
# create user end

# update user
input UpdateUserInput @validator(class: "App\\GraphQL\\Validators\\User\\UpdateUserValidator") {
  name: String!
  email: Email!
}

type UpdateUserPayload {
  name: String!
  email: Email!
}
# update user end
